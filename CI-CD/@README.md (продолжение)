## Безопасность

### Настройка SSL/TLS

В production-окружении необходимо настроить SSL-сертификаты для безопасного доступа:

1. Получите SSL-сертификаты (например, через Let's Encrypt):

```bash
ansible -i inventory/hosts.ini coordinator -m shell -a "apt install certbot -y"
ansible -i inventory/hosts.ini coordinator -m shell -a "certbot certonly --standalone -d your-domain.com -d www.your-domain.com"
```

2. Скопируйте сертификаты в директорию Nginx:

```bash
ansible -i inventory/hosts.ini coordinator -m shell -a "mkdir -p /opt/korotkossylka/CI-CD/ssl"
ansible -i inventory/hosts.ini coordinator -m shell -a "cp /etc/letsencrypt/live/your-domain.com/fullchain.pem /opt/korotkossylka/CI-CD/ssl/"
ansible -i inventory/hosts.ini coordinator -m shell -a "cp /etc/letsencrypt/live/your-domain.com/privkey.pem /opt/korotkossylka/CI-CD/ssl/"
```

3. Обновите docker-compose.yml для монтирования SSL-сертификатов:

```bash
ansible -i inventory/hosts.ini coordinator -m shell -a "sed -i 's|nginx-certs:/etc/nginx/ssl|./CI-CD/ssl:/etc/nginx/ssl:ro|g' /opt/korotkossylka/CI-CD/docker-compose.yml"
```

4. Перезапустите Nginx:

```bash
ansible -i inventory/hosts.ini coordinator -m shell -a "cd /opt/korotkossylka && docker-compose -f CI-CD/docker-compose.yml restart nginx"
```

### Настройка брандмауэра

Настройте брандмауэр (iptables или ufw) на каждом сервере:

```bash
# Создайте playbook для настройки брандмауэра
---
- name: Настройка брандмауэра
  hosts: all
  tasks:
    - name: Установка ufw
      apt:
        name: ufw
        state: present

    - name: Настройка базовых правил
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - 22  # SSH

    - name: Настройка правил для coordinator
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - 80   # HTTP
        - 443  # HTTPS
        - 53   # DNS (TCP)
      when: inventory_hostname in groups['coordinator']

    - name: Настройка правил DNS UDP
      ufw:
        rule: allow
        port: 53
        proto: udp
      when: inventory_hostname in groups['coordinator']

    - name: Настройка правил для frontend
      ufw:
        rule: allow
        port: 80
        proto: tcp
      when: inventory_hostname in groups['frontend']

    - name: Настройка правил для backend
      ufw:
        rule: allow
        port: 3000
        proto: tcp
      when: inventory_hostname in groups['backend']

    - name: Настройка правил для database
      ufw:
        rule: allow
        port: 27017
        proto: tcp
      when: inventory_hostname in groups['database']

    - name: Настройка правил для monitoring
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - 3030  # Grafana
        - 9090  # Prometheus
      when: inventory_hostname in groups['monitoring']

    - name: Включение и настройка ufw
      ufw:
        state: enabled
        policy: deny
```

### Настройка MongoDB для безопасности

Настройте MongoDB для повышенной безопасности:

```bash
# Создайте playbook для дополнительной настройки MongoDB
---
- name: Настройка безопасности MongoDB
  hosts: database
  tasks:
    - name: Создание конфигурационного файла
      copy:
        content: |
          # Настройки безопасности MongoDB
          storage:
            dbPath: /data/db
          security:
            authorization: enabled
          net:
            bindIp: 0.0.0.0
            port: 27017
            maxIncomingConnections: 100
          operationProfiling:
            mode: slowOp
            slowOpThresholdMs: 100
        dest: /opt/korotkossylka/CI-CD/docker/mongodb/mongod.conf
        mode: '0644'

    - name: Обновление Docker Compose для использования конфига
      lineinfile:
        path: /opt/korotkossylka/CI-CD/docker-compose.yml
        regexp: '      - mongodb-data:/data/db'
        line: '      - mongodb-data:/data/db\n      - ./CI-CD/docker/mongodb/mongod.conf:/etc/mongod.conf:ro'

    - name: Перезапуск MongoDB
      shell: |
        cd /opt/korotkossylka
        docker-compose -f CI-CD/docker-compose.yml restart mongodb
```

## Детальная настройка мониторинга

### Настройка алертов в Prometheus

Создайте правила алертов для мониторинга важных показателей:

```bash
# Создайте файл с правилами алертов
mkdir -p /opt/korotkossylka/CI-CD/docker/prometheus/rules
cat > /opt/korotkossylka/CI-CD/docker/prometheus/rules/alerts.yml << EOF
groups:
- name: korotkossylka
  rules:
  - alert: HighCPUUsage
    expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 80
    for: 5m
    labels:
      severity: warning
    annotations:
      summary: "Высокая загрузка CPU на {{ \$labels.instance }}"
      description: "Загрузка CPU превышает 80% на протяжении 5 минут."

  - alert: HighMemoryUsage
    expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100 > 80
    for: 5m
    labels:
      severity: warning
    annotations:
      summary: "Высокое использование памяти на {{ \$labels.instance }}"
      description: "Использование памяти превышает 80% на протяжении 5 минут."

  - alert: HighDiskUsage
    expr: (node_filesystem_size_bytes{mountpoint="/"} - node_filesystem_free_bytes{mountpoint="/"}) / node_filesystem_size_bytes{mountpoint="/"} * 100 > 80
    for: 5m
    labels:
      severity: warning
    annotations:
      summary: "Высокое использование диска на {{ \$labels.instance }}"
      description: "Использование диска превышает 80% на протяжении 5 минут."

  - alert: ContainerDown
    expr: absent(container_last_seen)
    for: 5m
    labels:
      severity: critical
    annotations:
      summary: "Контейнер остановлен на {{ \$labels.instance }}"
      description: "Контейнер {{ \$labels.name }} не отвечает более 5 минут."

  - alert: MongoDBDown
    expr: mongodb_up == 0
    for: 2m
    labels:
      severity: critical
    annotations:
      summary: "MongoDB не доступна"
      description: "MongoDB не доступна более 2 минут."
EOF

# Обновите конфигурацию Prometheus
cat > /opt/korotkossylka/CI-CD/docker/prometheus/prometheus.yml << EOF
global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  - /etc/prometheus/rules/*.yml

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']

  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']

  - job_name: 'mongodb-exporter'
    static_configs:
      - targets: ['mongodb-exporter:9216']
EOF

# Обновите docker-compose.yml для монтирования правил
sed -i '/      - prometheus-data:/a\      - ./CI-CD/docker/prometheus/rules:/etc/prometheus/rules' /opt/korotkossylka/CI-CD/docker-compose.yml

# Перезапустите Prometheus
cd /opt/korotkossylka && docker-compose -f CI-CD/docker-compose.yml restart prometheus
```

### Интеграция Alertmanager

Добавьте Alertmanager для отправки уведомлений:

```bash
# Создайте директорию и конфигурацию
mkdir -p /opt/korotkossylka/CI-CD/docker/alertmanager
cat > /opt/korotkossylka/CI-CD/docker/alertmanager/config.yml << EOF
global:
  resolve_timeout: 5m
  smtp_smarthost: 'smtp.example.com:587'
  smtp_from: 'alertmanager@example.com'
  smtp_auth_username: 'alertmanager@example.com'
  smtp_auth_password: 'your-password'
  smtp_require_tls: true

route:
  group_by: ['alertname', 'job']
  group_wait: 30s
  group_interval: 5m
  repeat_interval: 4h
  receiver: 'admin-emails'

receivers:
- name: 'admin-emails'
  email_configs:
  - to: 'admin@example.com'
    send_resolved: true
EOF

# Создайте Dockerfile для Alertmanager
cat > /opt/korotkossylka/CI-CD/docker/alertmanager/Dockerfile << EOF
FROM prom/alertmanager:latest

COPY CI-CD/docker/alertmanager/config.yml /etc/alertmanager/config.yml

EXPOSE 9093

ENTRYPOINT [ "/bin/alertmanager" ]
CMD        [ "--config.file=/etc/alertmanager/config.yml", \
             "--storage.path=/alertmanager" ]
EOF

# Добавьте сервис в docker-compose.yml
cat >> /opt/korotkossylka/CI-CD/docker-compose.yml << EOF

  # Alertmanager для оповещений
  alertmanager:
    build:
      context: ..
      dockerfile: CI-CD/docker/alertmanager/Dockerfile
    restart: always
    ports:
      - '9093:9093'
    networks:
      - monitoring
    volumes:
      - alertmanager-data:/alertmanager
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
EOF

# Добавьте том для данных
sed -i '/volumes:/a\  alertmanager-data:' /opt/korotkossylka/CI-CD/docker-compose.yml

# Обновите конфигурацию Prometheus
sed -i '/global:/a\  alertmanager_url: "http://alertmanager:9093"' /opt/korotkossylka/CI-CD/docker/prometheus/prometheus.yml

# Запустите Alertmanager
cd /opt/korotkossylka && docker-compose -f CI-CD/docker-compose.yml up -d alertmanager
```

## Расширенные настройки баз данных

### Настройка репликации MongoDB

Для высокой доступности настройте репликацию MongoDB:

```bash
# Создайте playbook для настройки репликации
---
- name: Настройка репликации MongoDB
  hosts: database
  tasks:
    - name: Создание конфигурационного файла реплики
      copy:
        content: |
          # Настройки репликации MongoDB
          replication:
            replSetName: rs0
          storage:
            dbPath: /data/db
          security:
            authorization: enabled
          net:
            bindIp: 0.0.0.0
            port: 27017
        dest: /opt/korotkossylka/CI-CD/docker/mongodb/mongod-replica.conf
        mode: '0644'

    - name: Создание скрипта инициализации реплики
      copy:
        content: |
          #!/bin/bash
          mongo --eval 'rs.initiate({_id: "rs0", members: [{_id: 0, host: "mongodb:27017"}]})'
          echo "MongoDB Replica Set инициализирован"
        dest: /opt/korotkossylka/CI-CD/docker/mongodb/init-replica.sh
        mode: '0755'

    - name: Обновление docker-compose.yml
      lineinfile:
        path: /opt/korotkossylka/CI-CD/docker-compose.yml
        regexp: '      - mongodb-data:/data/db'
        line: '      - mongodb-data:/data/db\n      - ./CI-CD/docker/mongodb/mongod-replica.conf:/etc/mongod.conf:ro\n      - ./CI-CD/docker/mongodb/init-replica.sh:/docker-entrypoint-initdb.d/init-replica.sh:ro'

    - name: Обновление связанных сервисов
      replace:
        path: /opt/korotkossylka/CI-CD/docker-compose.yml
        regexp: 'mongodb://admin:password@mongodb:27017'
        replace: 'mongodb://admin:password@mongodb:27017/?replicaSet=rs0'

    - name: Перезапуск MongoDB
      shell: |
        cd /opt/korotkossylka
        docker-compose -f CI-CD/docker-compose.yml restart mongodb
```

## Автоматизация и CI/CD

### Настройка автоматического обновления

Для автоматического обновления при изменениях в репозитории настройте webhook:

```bash
# Установите webhook
ansible -i inventory/hosts.ini coordinator -m shell -a "apt install webhook -y"

# Создайте скрипт обновления
cat > /opt/korotkossylka/CI-CD/update-hook.sh << EOF
#!/bin/bash
cd /opt/korotkossylka
git pull
ansible-playbook -i inventory/hosts.ini /path/to/playbooks/copy-files.yml
ansible-playbook -i inventory/hosts.ini /path/to/playbooks/deploy-services.yml
EOF
chmod +x /opt/korotkossylka/CI-CD/update-hook.sh

# Создайте конфигурацию webhook
cat > /etc/webhook.conf << EOF
[
  {
    "id": "deploy",
    "execute-command": "/opt/korotkossylka/CI-CD/update-hook.sh",
    "command-working-directory": "/opt/korotkossylka",
    "response-message": "Запущено обновление deployment",
    "trigger-rule": {
      "match": {
        "type": "value",
        "value": "your-secret-token",
        "parameter": {
          "source": "payload",
          "name": "token"
        }
      }
    }
  }
]
EOF

# Создайте systemd-сервис для webhook
cat > /etc/systemd/system/webhook.service << EOF
[Unit]
Description=Webhook для автоматического обновления
After=network.target

[Service]
ExecStart=/usr/bin/webhook -hooks /etc/webhook.conf -verbose

[Install]
WantedBy=multi-user.target
EOF

# Запустите webhook сервис
systemctl daemon-reload
systemctl enable webhook
systemctl start webhook
```

### Настройка GitHub Actions для автоматического деплоя

В репозитории GitHub создайте workflow-файл:

```yaml
name: Deploy to Production

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Trigger deployment webhook
        run: |
          curl -X POST http://your-server-ip:9000/hooks/deploy \
          -H "Content-Type: application/json" \
          -d '{"token": "your-secret-token"}'
```

## Производительность и оптимизация

### Настройка кэширования

Для улучшения производительности настройте кэш-сервер Redis:

```bash
# Добавьте Redis в docker-compose.yml
cat >> /opt/korotkossylka/CI-CD/docker-compose.yml << EOF

  # Redis для кэширования
  redis:
    image: redis:alpine
    restart: always
    networks:
      - db
    volumes:
      - redis-data:/data
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
EOF

# Добавьте том для данных Redis
sed -i '/volumes:/a\  redis-data:' /opt/korotkossylka/CI-CD/docker-compose.yml

# Запустите Redis
cd /opt/korotkossylka && docker-compose -f CI-CD/docker-compose.yml up -d redis
```

### Настройка Nginx для оптимизации

Улучшите конфигурацию Nginx для оптимальной производительности:

```bash
# Создайте улучшенную конфигурацию Nginx
cat > /opt/korotkossylka/CI-CD/docker/nginx/optimized.conf << EOF
user nginx;
worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 4096;
    multi_accept on;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                    '\$status \$body_bytes_sent "\$http_referer" '
                    '"\$http_user_agent" "\$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main buffer=16k;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Настройка буферов
    client_body_buffer_size 10K;
    client_header_buffer_size 1k;
    client_max_body_size 8m;
    large_client_header_buffers 4 4k;

    # Настройка GZIP сжатия
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Кэширование микрокэша
    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Остальная конфигурация...
    # (добавьте остальные блоки конфигурации)
EOF

# Обновите Dockerfile Nginx
sed -i 's|COPY CI-CD/docker/nginx/nginx.conf /etc/nginx/nginx.conf|COPY CI-CD/docker/nginx/optimized.conf /etc/nginx/nginx.conf|g' /opt/korotkossylka/CI-CD/docker/nginx/Dockerfile

# Перезапустите Nginx
cd /opt/korotkossylka && docker-compose -f CI-CD/docker-compose.yml up -d --build nginx
```

## Дополнительные ресурсы

- [Официальная документация Docker](https://docs.docker.com/)
- [Официальная документация Ansible](https://docs.ansible.com/)
- [Руководство по MongoDB](https://docs.mongodb.com/)
- [Руководство по Nginx](https://nginx.org/en/docs/)
- [Документация Prometheus](https://prometheus.io/docs/introduction/overview/)
- [Документация Grafana](https://grafana.com/docs/)

## Заключение

Данное руководство предоставляет полные инструкции по настройке, развертыванию и обслуживанию кластера КороткоСсылка на базе микросервисной архитектуры. Следуя этим инструкциям, вы сможете настроить высокодоступную, безопасную и масштабируемую инфраструктуру.

При возникновении вопросов или проблем обращайтесь к команде разработки или создавайте issue в репозитории проекта.