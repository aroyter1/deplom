---
description: project
globs: 
---
Для вашего проекта, который включает как фронтенд, так и бэкенд с использованием современных технологий и подходов к разработке, я предлагаю улучшить ваш промпт для правильной организации работы над проектом. Вот структурированная версия вашего запроса, которая поможет вам четко определить задачи и требования:

---

### **Цель проекта**
Разработка веб-приложения для сокращения ссылок с функциями авторизации, отслеживания статистики по переходам и генерации QR-кодов. Приложение должно быть масштабируемым, отказоустойчивым и соответствовать современным стандартам безопасности.

---

### **Требования к архитектуре**
1. **Масштабируемость**: 
   - Возможность расширять количество серверов для бэкенда и баз данных.
   - Поддержка горизонтального масштабирования (load balancing).

2. **Отказоустойчивость**:
   - Использование резервного сервера для бэкенда.
   - Репликация базы данных для обеспечения высокой доступности.

3. **Производительность**:
   - Оптимизация обработки запросов для быстрого сокращения и перенаправления ссылок.
   - Кэширование часто используемых данных (например, Redis).

4. **Безопасность**:
   - Шифрование паролей пользователей (например, bcrypt).
   - Защита от SQL-инъекций и других атак.
   - Использование JWT для аутентификации.

---

### **Функциональные требования**

#### **Frontend**
##### Стек технологий:
- Vue 3
- Vue Router
- Pinia (для управления состоянием)
- Tailwind CSS (для красивого и адаптивного дизайна)

##### Функционал:
1. **Авторизация/Регистрация**:
   - Пользователи могут регистрироваться через логин и пароль.
   - Реализация механизма входа с сохранением токена аутентификации.

2. **Сокращение ссылок**:
   - Пользователи могут создавать сокращенные ссылки.
   - Генерация уникальных alias для каждой ссылки.

3. **QR-коды**:
   - Для каждой созданной сокращенной ссылки пользователь может получить QR-код.

4. **Управление ссылками**:
   - Просмотр списка всех созданных сокращенных ссылок.
   - Редактирование alias существующих ссылок.
   - Удаление ссылок.

5. **Статистика**:
   - Отображение количества переходов по каждой ссылке.
   - Детальная статистика (например, дата и время переходов).

---

#### **Backend**
##### Стек технологий:
- Express.js (Node.js framework)
- MongoDB 
- Redis (для кэширования)
- JWT (для аутентификации)
- BCrypt (для шифрования паролей)

##### Архитектура:
1. **Серверы**:
   - 1 сервер для фронтенда.
   - 2 сервера для бэкенда (основной и резервный).
   - 2 сервера для базы данных (основной и реплика).

2. **API**:
   - `/auth/register` — регистрация пользователя.
   - `/auth/login` — вход пользователя.
   - `/links/create` — создание новой сокращенной ссылки.
   - `/links/list` — получение списка всех ссылок пользователя.
   - `/links/edit/:id` — редактирование alias ссылки.
   - `/links/delete/:id` — удаление ссылки.
   - `/stats/:id` — получение статистики по ссылке.
   - `/qr/:id` — генерация QR-кода для ссылки.

3. **Безопасность**:
   - Все данные передаются через HTTPS.
   - Валидация входящих данных на стороне сервера.
   - Rate limiting для защиты от DDoS-атак.

---

### **Технические детали реализации**

#### **Frontend**
1. **Авторизация**:
   - После успешной авторизации сервер возвращает JWT-токен, который сохраняется в `localStorage` или `cookies`.
   - Токен используется для авторизации всех последующих запросов.

2. **Создание ссылок**:
   - Пользователь отправляет оригинальную ссылку на сервер.
   - Сервер генерирует уникальный alias и возвращает его клиенту.

3. **QR-коды**:
   - Использование библиотеки (например, `qrcode-generator`) для генерации QR-кодов.

4. **Статистика**:
   - Каждый переход по сокращенной ссылке записывается в базу данных.
   - Пользователь может просматривать статистику по своим ссылкам.

#### **Backend**
1. **Хранение данных**:
   - Таблица `users`: содержит информацию о пользователях (логин, зашифрованный пароль, email).
   - Таблица `links`: содержит информацию о ссылках (оригинальная ссылка, alias, ID пользователя, количество переходов).

2. **Обработка запросов**:
   - При получении запроса на сокращенную ссылку (`/:alias`), сервер проверяет наличие записи в базе данных и перенаправляет пользователя на оригинальную ссылку.
   - Записывает каждый переход в таблицу статистики.

3. **Защита**:
   - Все пароли хранятся в зашифрованном виде.
   - Валидация входных данных для предотвращения SQL-инъекций и XSS-атак.

---


