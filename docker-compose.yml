version: '3.8'

services:
  # Сервис MongoDB
  mongo:
    image: mongo:latest
    container_name: korotko_mongo
    volumes:
      - mongo_data:/data/db
      - ./backups:/data/backups
    ports:
      - '27017:27017'
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=rootpassword
    networks:
      - app_network
    restart: unless-stopped
    command: --replSet rs0
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  # MongoDB Replica Set Initializer
  mongo-init:
    image: mongo:latest
    depends_on:
      - mongo
    networks:
      - app_network
    restart: 'no'
    entrypoint: >
      bash -c "
        sleep 10;
        mongo --host mongo:27017 -u root -p rootpassword --authenticationDatabase admin --eval \"
          rs.initiate({
            _id: 'rs0',
            members: [{ _id: 0, host: 'mongo:27017' }]
          })
        \"
      "

  # Backend API сервис - можно масштабировать
  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    image: korotko-backend:latest
    container_name: korotko_backend
    ports:
      - '4512:4512'
    depends_on:
      - mongo
    environment:
      - PORT=4512
      - NODE_ENV=production
      - MONGODB_URI=mongodb://root:rootpassword@mongo:27017/url-shortener?authSource=admin
      - MONGODB_REPLICA_SET=rs0
      - MONGODB_MAX_POOL_SIZE=10
      - MONGODB_CONNECT_TIMEOUT_MS=30000
      - MONGODB_SOCKET_TIMEOUT_MS=360000
      - JWT_SECRET=${JWT_SECRET:-your_production_jwt_secret}
      - JWT_EXPIRES_IN=7d
      - BASE_URL=${BASE_URL:-http://localhost:4512}
      - CLIENT_URL=${CLIENT_URL:-http://localhost:5200}
      - LOG_LEVEL=info
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
    networks:
      - app_network
    restart: unless-stopped
    # Для масштабирования используйте:
    # docker-compose up -d --scale backend=3

  # Frontend сервис
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    image: korotko-frontend:latest
    container_name: korotko_frontend
    ports:
      - '5200:80'
    depends_on:
      - backend
    environment:
      - VITE_API_URL=${VITE_API_URL:-http://localhost:4512}
      - VITE_APP_NAME=${VITE_APP_NAME:-КороткоСсылка}
      - VITE_APP_DESCRIPTION=${VITE_APP_DESCRIPTION:-Профессиональный сервис для сокращения ссылок}
    networks:
      - app_network
    restart: unless-stopped

  # Nginx для балансировки нагрузки между экземплярами Backend
  nginx:
    image: nginx:alpine
    container_name: korotko_nginx
    ports:
      - '80:80'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
    networks:
      - app_network
    restart: unless-stopped

networks:
  app_network:
    driver: bridge

volumes:
  mongo_data:
